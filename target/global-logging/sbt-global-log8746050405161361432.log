[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\RicardoMartinez\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\RicardoMartinez\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[info] Updated file C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module\project\build.properties: set sbt.version to 1.6.2
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (BellSoft Java 1.8.0_362)
[debug]       Load.loadUnit: plugins took 134.7794ms
[debug]       Load.loadUnit: defsScala took 0.4889ms
[debug] [Loading] Scanning directory C:\Users\RicardoMartinez\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\RicardoMartinez\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 30.635899 ms
[debug]           Load.resolveProject(global-plugins) took 65.9449ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\RicardoMartinez\.sbt\1.0\plugins, plugins: List(<none>))) took 144.1411ms
[debug] [Loading] Done in C:\Users\RicardoMartinez\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 177.6408ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2764ms
[debug]     Load.loadUnit(file:/C:/Users/RicardoMartinez/.sbt/1.0/plugins/, ...) took 322.9241ms
[debug]   Load.apply: load took 602.4675ms
[debug]   Load.apply: resolveProjects took 8.0991ms
[debug]   Load.apply: finalTransforms took 80.078499ms
[debug]   Load.apply: config.delegates took 11.809799ms
[debug]   Load.apply: Def.make(settings)... took 418.328699ms
[debug]   Load.apply: structureIndex took 116.2244ms
[debug]   Load.apply: mkStreams took 1.9999ms
[info] loading global plugins from C:\Users\RicardoMartinez\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7815.8536ms
[debug]           Load.loadUnit: plugins took 25.8596ms
[debug]           Load.loadUnit: defsScala took 0.012201ms
[debug] [Loading] Scanning directory C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module\project
[debug]             Load.loadUnit: mkEval took 8.6746ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4354 ms
[info] loading settings for project sky-economy-module-build from idea1.sbt ...
[debug]               Load.resolveProject(sky-economy-module-build) took 2.433699ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sky-economy-module-build, base: C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module\project, plugins: List(<none>))) took 4.339399ms
[debug] [Loading] Done in C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module\project, returning: (sky-economy-module-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2620.2821ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.6311ms
[debug]         Load.loadUnit(file:/C:/Users/RicardoMartinez/OneDrive%20-%20applaudostudios.com/Documents/Learning%20Scala/projects/sky-economy-module/project/, ...) took 2651.123699ms
[debug]       Load.apply: load took 2652.560299ms
[debug]       Load.apply: resolveProjects took 0.079701ms
[debug]       Load.apply: finalTransforms took 9.033401ms
[debug]       Load.apply: config.delegates took 0.481001ms
[debug]       Load.apply: Def.make(settings)... took 74.3717ms
[debug]       Load.apply: structureIndex took 36.343699ms
[debug]       Load.apply: mkStreams took 0.002999ms
[info] loading project definition from C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4000.677199ms
[debug]     Load.loadUnit: defsScala took 0.005299ms
[debug] [Loading] Scanning directory C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module
[debug]       Load.loadUnit: mkEval took 0.362799ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.7135 ms
[info] loading settings for project sky-economy-module from build.sbt ...
[debug]         Load.resolveProject(sky-economy-module) took 72.9924ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sky-economy-module, base: C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module, plugins: List(<none>))) took 77.5837ms
[debug] [Loading] Done in C:\Users\RicardoMartinez\OneDrive - applaudostudios.com\Documents\Learning Scala\projects\sky-economy-module, returning: (sky-economy-module)
[debug]     Load.loadUnit: loadedProjectsRaw took 2725.356399ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.849599ms
[debug]   Load.loadUnit(file:/C:/Users/RicardoMartinez/OneDrive%20-%20applaudostudios.com/Documents/Learning%20Scala/projects/sky-economy-module/, ...) took 6733.242801ms
[debug] Load.apply: load took 6736.9157ms
[debug] Load.apply: resolveProjects took 0.2022ms
[debug] Load.apply: finalTransforms took 79.805399ms
[debug] Load.apply: config.delegates took 0.462999ms
[debug] Load.apply: Def.make(settings)... took 149.234999ms
[debug] Load.apply: structureIndex took 62.8994ms
[debug] Load.apply: mkStreams took 0.004ms
[info] set current project to sky-economy-module (in build file:/C:/Users/RicardoMartinez/OneDrive%20-%20applaudostudios.com/Documents/Learning%20Scala/projects/sky-economy-module/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53688 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53688, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to sky-economy-module (in build file:/C:/Users/RicardoMartinez/OneDrive%20-%20applaudostudios.com/Documents/Learning%20Scala/projects/sky-economy-module/)
[debug] > Exec(idea-shell, None, None)
